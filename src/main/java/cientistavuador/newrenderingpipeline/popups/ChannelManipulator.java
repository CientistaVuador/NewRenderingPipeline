/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package cientistavuador.newrenderingpipeline.popups;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class ChannelManipulator extends javax.swing.JFrame {

    private int width = 1;
    private int height = 1;
    private BufferedImage redChannel = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);
    private BufferedImage greenChannel = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);
    private BufferedImage blueChannel = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);
    private BufferedImage alphaChannel = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);

    /**
     * Creates new form ChannelManipulator
     */
    public ChannelManipulator() {
        initComponents();
        initializeChannels();
    }

    private void updateChannels() {
        this.redChannelLabel.setIcon(new ImageIcon(this.redChannel.getScaledInstance(128, 128, Image.SCALE_FAST)));
        this.greenChannelLabel.setIcon(new ImageIcon(this.greenChannel.getScaledInstance(128, 128, Image.SCALE_FAST)));
        this.blueChannelLabel.setIcon(new ImageIcon(this.blueChannel.getScaledInstance(128, 128, Image.SCALE_FAST)));
        this.alphaChannelLabel.setIcon(new ImageIcon(this.alphaChannel.getScaledInstance(128, 128, Image.SCALE_FAST)));
    }

    private void initializeChannels() {
        this.redChannel.setRGB(0, 0, Color.WHITE.getRGB());
        this.greenChannel.setRGB(0, 0, Color.WHITE.getRGB());
        this.blueChannel.setRGB(0, 0, Color.WHITE.getRGB());
        this.alphaChannel.setRGB(0, 0, Color.WHITE.getRGB());

        updateChannels();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        blueChannelLabel = new javax.swing.JLabel();
        alphaChannelLabel = new javax.swing.JLabel();
        greenChannelLabel = new javax.swing.JLabel();
        redChannelLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        redLoad = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        greenLoad = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        blueLoad = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        alphaLoad = new javax.swing.JComboBox<>();
        loadButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        redSave = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        greenSave = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        blueSave = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        alphaSave = new javax.swing.JComboBox<>();
        saveButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        normalMapX = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        normalMapY = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        normalMapZ = new javax.swing.JComboBox<>();
        calculateNormalButton = new javax.swing.JButton();
        resizePanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        widthSpinner = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        heightSpinner = new javax.swing.JSpinner();
        resizeButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        resizeFiltering = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Channel Manipulator");
        setResizable(false);

        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });

        jLabel1.setText("Red");

        jLabel2.setText("Green");

        jLabel3.setText("Blue");

        jLabel4.setText("Alpha");

        blueChannelLabel.setToolTipText("");
        blueChannelLabel.setMaximumSize(new java.awt.Dimension(128, 128));
        blueChannelLabel.setMinimumSize(new java.awt.Dimension(128, 128));

        alphaChannelLabel.setToolTipText("");
        alphaChannelLabel.setMaximumSize(new java.awt.Dimension(128, 128));
        alphaChannelLabel.setMinimumSize(new java.awt.Dimension(128, 128));

        greenChannelLabel.setToolTipText("");
        greenChannelLabel.setMaximumSize(new java.awt.Dimension(128, 128));
        greenChannelLabel.setMinimumSize(new java.awt.Dimension(128, 128));

        redChannelLabel.setToolTipText("");
        redChannelLabel.setMaximumSize(new java.awt.Dimension(128, 128));
        redChannelLabel.setMinimumSize(new java.awt.Dimension(128, 128));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(redChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(greenChannelLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                            .addComponent(blueChannelLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alphaChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greenChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blueChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphaChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        tabs.addTab("Colors", jPanel1);

        jLabel5.setText("Image Red To:");

        redLoad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "Nothing" }));

        jLabel6.setText("Image Green To:");

        greenLoad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "Nothing" }));
        greenLoad.setSelectedIndex(1);

        jLabel7.setText("Image Blue To:");

        blueLoad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "Nothing" }));
        blueLoad.setSelectedIndex(2);

        jLabel8.setText("Image Alpha To:");

        alphaLoad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "Nothing" }));
        alphaLoad.setSelectedIndex(3);

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redLoad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(greenLoad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blueLoad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alphaLoad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(261, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alphaLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(loadButton)
                .addContainerGap())
        );

        tabs.addTab("Load", jPanel2);

        redSave.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "One", "Zero" }));

        jLabel9.setText("Red Channel:");

        jLabel10.setText("Green Channel:");

        greenSave.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "One", "Zero" }));
        greenSave.setSelectedIndex(1);

        jLabel11.setText("Blue Channel:");

        blueSave.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "One", "Zero" }));
        blueSave.setSelectedIndex(2);

        jLabel12.setText("Alpha Channel:");

        alphaSave.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha", "One", "Zero" }));
        alphaSave.setSelectedIndex(3);

        saveButton.setText("Save");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(redSave, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(greenSave, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addComponent(blueSave, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addComponent(alphaSave, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(266, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alphaSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addContainerGap())
        );

        tabs.addTab("Save", jPanel3);

        jLabel13.setText("X Channel:");

        normalMapX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha" }));

        jLabel14.setText("Y Channel:");

        normalMapY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha" }));
        normalMapY.setSelectedIndex(1);

        jLabel15.setText("Output Z To:");

        normalMapZ.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green", "Blue", "Alpha" }));
        normalMapZ.setSelectedIndex(2);

        calculateNormalButton.setText("Calculate");
        calculateNormalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateNormalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(normalMapX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(normalMapY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(normalMapZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(268, Short.MAX_VALUE)
                .addComponent(calculateNormalButton)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normalMapX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normalMapY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normalMapZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(calculateNormalButton)
                .addContainerGap())
        );

        tabs.addTab("Normal Map Z", jPanel4);

        jLabel16.setText("Width:");

        widthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 16384, 1));

        jLabel17.setText("Height:");

        heightSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 16384, 1));

        resizeButton.setText("Resize");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        jLabel18.setText("Filtering:");

        resizeFiltering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Linear", "Nearest" }));

        javax.swing.GroupLayout resizePanelLayout = new javax.swing.GroupLayout(resizePanel);
        resizePanel.setLayout(resizePanelLayout);
        resizePanelLayout.setHorizontalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resizePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resizeButton))
                    .addGroup(resizePanelLayout.createSequentialGroup()
                        .addGroup(resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16)
                            .addComponent(widthSpinner)
                            .addComponent(jLabel17)
                            .addComponent(heightSpinner)
                            .addComponent(jLabel18)
                            .addComponent(resizeFiltering, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 241, Short.MAX_VALUE)))
                .addContainerGap())
        );
        resizePanelLayout.setVerticalGroup(
            resizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resizeFiltering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(resizeButton)
                .addContainerGap())
        );

        tabs.addTab("Resize", resizePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs))
        );

        tabs.getAccessibleContext().setAccessibleName("Colors");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File("").getAbsoluteFile());
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileFilter(new FileNameExtensionFilter("Images", "png", "jpg", "jpeg"));
        int code = chooser.showOpenDialog(this);
        if (code == JFileChooser.APPROVE_OPTION) {
            File imageFile = chooser.getSelectedFile();
            if (imageFile != null && imageFile.isFile()) {
                loadFileImage(imageFile);
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void copyTo(Image from, BufferedImage to) {
        Graphics2D g = to.createGraphics();
        g.drawImage(from, 0, 0, null);
        g.dispose();
    }

    private void resize(int newWidth, int newHeight, boolean linear) {
        int hint = Image.SCALE_FAST;
        if (linear) {
            hint = Image.SCALE_SMOOTH;
        }

        Image resizedRed = this.redChannel.getScaledInstance(newWidth, newHeight, hint);
        Image resizedGreen = this.greenChannel.getScaledInstance(newWidth, newHeight, hint);
        Image resizedBlue = this.blueChannel.getScaledInstance(newWidth, newHeight, hint);
        Image resizedAlpha = this.alphaChannel.getScaledInstance(newWidth, newHeight, hint);

        this.redChannel = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_3BYTE_BGR);
        this.greenChannel = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_3BYTE_BGR);
        this.blueChannel = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_3BYTE_BGR);
        this.alphaChannel = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_3BYTE_BGR);

        copyTo(resizedRed, this.redChannel);
        copyTo(resizedGreen, this.greenChannel);
        copyTo(resizedBlue, this.blueChannel);
        copyTo(resizedAlpha, this.alphaChannel);

        this.width = newWidth;
        this.height = newHeight;
    }

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        int newWidth = ((Number) this.widthSpinner.getValue()).intValue();
        int newHeight = ((Number) this.heightSpinner.getValue()).intValue();

        if (this.width == newWidth && this.height == newHeight) {
            return;
        }

        boolean linear = false;
        if (this.resizeFiltering.getSelectedItem().toString().equalsIgnoreCase("linear")) {
            linear = true;
        }

        resize(newWidth, newHeight, linear);
        updateChannels();
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        if (this.tabs.getSelectedComponent().equals(this.resizePanel)) {
            this.widthSpinner.setValue(this.width);
            this.heightSpinner.setValue(this.height);
        }
    }//GEN-LAST:event_tabsStateChanged

    private BufferedImage getCalculateNormalChannel(JComboBox<String> comboBox) {
        switch (comboBox.getSelectedItem().toString().toLowerCase()) {
            case "red" -> {
                return this.redChannel;
            }
            case "green" -> {
                return this.greenChannel;
            }
            case "blue" -> {
                return this.blueChannel;
            }
            case "alpha" -> {
                return this.alphaChannel;
            }
        }
        return null;
    }

    private void calculateNormalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateNormalButtonActionPerformed
        BufferedImage normalX = getCalculateNormalChannel(this.normalMapX);
        BufferedImage normalY = getCalculateNormalChannel(this.normalMapY);
        BufferedImage outNormalZ = getCalculateNormalChannel(this.normalMapZ);
        
        for (int y = 0; y < this.height; y++) {
            for (int x = 0; x < this.width; x++) {
                float nX = (((normalX.getRGB(x, y) & 0xFF) / 255f) * 2f) - 1f;
                float nY = (((normalY.getRGB(x, y) & 0xFF) / 255f) * 2f) - 1f;
                float nZ = (float) Math.sqrt(Math.abs(1.0 - (nX * nX) - (nY * nY)));
                
                int nZInt = Math.min(Math.max((int)(((nZ + 1f) * 0.5f) * 255f), 0), 255);
                
                outNormalZ.setRGB(x, y, grayRGB(nZInt));
            }
        }
        
        updateChannels();
    }//GEN-LAST:event_calculateNormalButtonActionPerformed

    private int grayRGB(int color) {
        return (255 << 24) | (color << 16) | (color << 8) | (color << 0);
    }

    private BufferedImage swizzle(JComboBox<String> comboBox) {
        switch (comboBox.getSelectedItem().toString().toLowerCase()) {
            case "red" -> {
                return this.redChannel;
            }
            case "green" -> {
                return this.greenChannel;
            }
            case "blue" -> {
                return this.blueChannel;
            }
            case "alpha" -> {
                return this.alphaChannel;
            }
        }
        return null;
    }

    private void loadFileImage(File e) {
        try {
            BufferedImage imageRead = ImageIO.read(new ByteArrayInputStream(Files.readAllBytes(e.toPath())));

            {
                int imageWidth = imageRead.getWidth();
                int imageHeight = imageRead.getHeight();

                {
                    int newWidth = Math.max(imageWidth, this.width);
                    int newHeight = Math.max(imageHeight, this.height);

                    if (newWidth != this.width || newHeight != this.height) {
                        resize(newWidth, newHeight, false);
                    }
                }

                if (imageWidth != this.width || imageHeight != this.height) {
                    Image resizedImage = imageRead.getScaledInstance(this.width, this.height, Image.SCALE_FAST);
                    imageRead = new BufferedImage(this.width, this.height, BufferedImage.TYPE_INT_ARGB);
                    copyTo(resizedImage, imageRead);
                }
            }

            BufferedImage[] images = {
                swizzle(this.redLoad),
                swizzle(this.greenLoad),
                swizzle(this.blueLoad),
                swizzle(this.alphaLoad)
            };

            for (int y = 0; y < this.height; y++) {
                for (int x = 0; x < this.width; x++) {
                    int argb = imageRead.getRGB(x, y);

                    int[] components = {
                        (argb >> 16) & 0xFF,
                        (argb >> 8) & 0xFF,
                        (argb >> 0) & 0xFF,
                        (argb >> 24) & 0xFF
                    };

                    for (int i = 0; i < components.length; i++) {
                        BufferedImage currentImage = images[i];
                        if (currentImage != null) {
                            currentImage.setRGB(x, y, grayRGB(components[i]));
                        }
                    }
                }
            }

            updateChannels();
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
            Toolkit.getDefaultToolkit().beep();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChannelManipulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alphaChannelLabel;
    private javax.swing.JComboBox<String> alphaLoad;
    private javax.swing.JComboBox<String> alphaSave;
    private javax.swing.JLabel blueChannelLabel;
    private javax.swing.JComboBox<String> blueLoad;
    private javax.swing.JComboBox<String> blueSave;
    private javax.swing.JButton calculateNormalButton;
    private javax.swing.JLabel greenChannelLabel;
    private javax.swing.JComboBox<String> greenLoad;
    private javax.swing.JComboBox<String> greenSave;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton loadButton;
    private javax.swing.JComboBox<String> normalMapX;
    private javax.swing.JComboBox<String> normalMapY;
    private javax.swing.JComboBox<String> normalMapZ;
    private javax.swing.JLabel redChannelLabel;
    private javax.swing.JComboBox<String> redLoad;
    private javax.swing.JComboBox<String> redSave;
    private javax.swing.JButton resizeButton;
    private javax.swing.JComboBox<String> resizeFiltering;
    private javax.swing.JPanel resizePanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JSpinner widthSpinner;
    // End of variables declaration//GEN-END:variables
}
